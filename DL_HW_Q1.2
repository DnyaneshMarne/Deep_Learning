{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "27d06ccb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fe3578d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#device setup\n",
    "device = 'cuda' if torch.cuda.is_available() else 'cpu'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "08ee8dda",
   "metadata": {},
   "outputs": [],
   "source": [
    "#set up seed for consistancy\n",
    "torch.manual_seed(1)\n",
    "batch_size = 4\n",
    "#get MNIST dataset\n",
    "data_train = torchvision.datasets.MNIST(root='./data', \n",
    "                                           train=True, \n",
    "                                           transform=transforms.ToTensor(),  \n",
    "                                           download=True)\n",
    "\n",
    "data_test = torchvision.datasets.MNIST(root='./data', \n",
    "                                          train=False, \n",
    "                                          transform=transforms.ToTensor(),\n",
    "                                          download=True)\n",
    "train_loader = torch.utils.data.DataLoader(data_train, batch_size=batch_size,\n",
    "                                          shuffle=True)\n",
    "\n",
    "test_loader = torch.utils.data.DataLoader(data_test, batch_size=batch_size,\n",
    "                                         shuffle=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "4ce0d031",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([4, 5, 5, 5])\n"
     ]
    }
   ],
   "source": [
    "rand_data = iter(train_loader)\n",
    "images, labels = rand_data.next()\n",
    "\n",
    "def showData(images):\n",
    "    images = images/2+0.5\n",
    "    npimg = images.numpy()\n",
    "    plt.imshow(np.transpose(npimg,(1,2,0)))\n",
    "    plt.show()\n",
    "    \n",
    "showData(torchvision.utils.make_grid(images))\n",
    "convd1 =nn.Conv2d(1, 20, 3)\n",
    "pool=nn.MaxPool2d(2,2)\n",
    "convd2 =nn.Conv2d(20, 5, 3)\n",
    "x=convd1(images)\n",
    "#nn.ReLU(x)\n",
    "x=pool(x)\n",
    "x=convd2(x)\n",
    "x=pool(x)\n",
    "#nn.Flatten(x)\n",
    "print(x.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "8cf428b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "class CNN_1(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN_1, self).__init__()\n",
    "        self.convolution = nn.Sequential(\n",
    "            nn.Conv2d(1, 10, 3),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(2,2),\n",
    "            nn.Conv2d(10, 16, 3),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(2,2),\n",
    "            nn.Flatten(),\n",
    "            nn.Linear(16*5*5, 500), \n",
    "            nn.ReLU(),\n",
    "            nn.Linear(500, 250),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(250, 125),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(125, 10)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        outputs = self.convolution(x)\n",
    "        return outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "d95a2ec3",
   "metadata": {},
   "outputs": [],
   "source": [
    "class CNN_2(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN_2, self).__init__()\n",
    "        self.convolution = nn.Sequential(\n",
    "            nn.Conv2d(1, 10, 3),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(2,2),\n",
    "            nn.Flatten(),\n",
    "            nn.Linear(10*13*13, 500), \n",
    "            nn.ReLU(),\n",
    "            nn.Linear(500, 250),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(250, 125),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(125, 10)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        outputs = self.convolution(x)\n",
    "        return outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "5081a47a",
   "metadata": {},
   "outputs": [],
   "source": [
    "class CNN_3(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(CNN_3, self).__init__()\n",
    "        self.convolution = nn.Sequential(\n",
    "            nn.Conv2d(1, 20, 3),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(2,2),\n",
    "            nn.Conv2d(20, 5, 3),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(2,2),\n",
    "            nn.Flatten(),\n",
    "            nn.Linear(5*5*5, 400), \n",
    "            nn.ReLU(),\n",
    "            nn.Linear(400, 200),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(200, 100),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(100, 10)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        outputs = self.convolution(x)\n",
    "        return outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "849b815e",
   "metadata": {},
   "outputs": [],
   "source": [
    "learning_rate = 0.001\n",
    "cnn_model_one = CNN_3().to(device)\n",
    "#cnn_model_one.to(device)\n",
    "\n",
    "loss_func = nn.CrossEntropyLoss()\n",
    "optimizer_sgd = torch.optim.SGD(cnn_model_one.parameters(), lr=learning_rate, momentum=0.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "f51db552",
   "metadata": {},
   "outputs": [],
   "source": [
    "def trainModel(model,num_epochs):\n",
    "    n_total_steps = len(train_loader)\n",
    "    loss_train = []\n",
    "    epochs = []\n",
    "    accuracy_train = []\n",
    "    for epoch in range(num_epochs):  # loop over the dataset multiple times\n",
    "        n_correct = 0\n",
    "        n_samples = 0\n",
    "        for i, (inputs, labels) in enumerate(train_loader):  \n",
    "            # get the inputs; data is a list of [inputs, labels]\n",
    "            #inputs, labels = data\n",
    "            labels = labels.to(device)\n",
    "            # zero the parameter gradients\n",
    "            optimizer_sgd.zero_grad()\n",
    "            # forward + backward + optimize\n",
    "            outputs = model(inputs).to(device)\n",
    "            loss = loss_func(outputs, labels)\n",
    "            loss.backward()\n",
    "            optimizer_sgd.step()\n",
    "            \n",
    "            # print statistics\n",
    "            #running_loss += loss.item()\n",
    "            \n",
    "            _, predicted = torch.max(outputs.data, 1)\n",
    "            n_samples += labels.size(0)\n",
    "            n_correct += (predicted == labels).sum().item()\n",
    "            acc = 100.0 * n_correct / n_samples\n",
    "\n",
    "            if (i+1) % 1000 == 0:\n",
    "                print (f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{n_total_steps}], Loss: {loss.item():.4f}, Accuracy : {acc} %')\n",
    "                epochs.append(epoch)\n",
    "                loss_train.append(loss.item())\n",
    "                accuracy_train.append(acc)\n",
    "\n",
    "    return epochs,loss_train,accuracy_train\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "6f4cfa2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/4], Step [1000/15000], Loss: 2.2839, Accuracy : 11.4 %\n",
      "Epoch [1/4], Step [2000/15000], Loss: 1.3712, Accuracy : 22.45 %\n",
      "Epoch [1/4], Step [3000/15000], Loss: 0.6903, Accuracy : 40.358333333333334 %\n",
      "Epoch [1/4], Step [4000/15000], Loss: 0.3284, Accuracy : 51.35 %\n",
      "Epoch [1/4], Step [5000/15000], Loss: 0.3291, Accuracy : 58.485 %\n",
      "Epoch [1/4], Step [6000/15000], Loss: 0.2088, Accuracy : 63.733333333333334 %\n",
      "Epoch [1/4], Step [7000/15000], Loss: 0.0363, Accuracy : 67.7 %\n",
      "Epoch [1/4], Step [8000/15000], Loss: 0.0571, Accuracy : 70.759375 %\n",
      "Epoch [1/4], Step [9000/15000], Loss: 0.0167, Accuracy : 73.33888888888889 %\n",
      "Epoch [1/4], Step [10000/15000], Loss: 0.0043, Accuracy : 75.435 %\n",
      "Epoch [1/4], Step [11000/15000], Loss: 0.0018, Accuracy : 77.23409090909091 %\n",
      "Epoch [1/4], Step [12000/15000], Loss: 0.0133, Accuracy : 78.71666666666667 %\n",
      "Epoch [1/4], Step [13000/15000], Loss: 0.0063, Accuracy : 79.95769230769231 %\n",
      "Epoch [1/4], Step [14000/15000], Loss: 0.0011, Accuracy : 81.11071428571428 %\n",
      "Epoch [1/4], Step [15000/15000], Loss: 0.0141, Accuracy : 82.13666666666667 %\n",
      "Epoch [2/4], Step [1000/15000], Loss: 0.0022, Accuracy : 96.45 %\n",
      "Epoch [2/4], Step [2000/15000], Loss: 0.0007, Accuracy : 96.65 %\n",
      "Epoch [2/4], Step [3000/15000], Loss: 0.0088, Accuracy : 96.84166666666667 %\n",
      "Epoch [2/4], Step [4000/15000], Loss: 0.0052, Accuracy : 96.88125 %\n",
      "Epoch [2/4], Step [5000/15000], Loss: 0.0020, Accuracy : 96.945 %\n",
      "Epoch [2/4], Step [6000/15000], Loss: 0.0023, Accuracy : 96.9125 %\n",
      "Epoch [2/4], Step [7000/15000], Loss: 0.0011, Accuracy : 97.00357142857143 %\n",
      "Epoch [2/4], Step [8000/15000], Loss: 0.0007, Accuracy : 97.075 %\n",
      "Epoch [2/4], Step [9000/15000], Loss: 0.2342, Accuracy : 97.13333333333334 %\n",
      "Epoch [2/4], Step [10000/15000], Loss: 0.0750, Accuracy : 97.14 %\n",
      "Epoch [2/4], Step [11000/15000], Loss: 0.0005, Accuracy : 97.18181818181819 %\n",
      "Epoch [2/4], Step [12000/15000], Loss: 0.0064, Accuracy : 97.2 %\n",
      "Epoch [2/4], Step [13000/15000], Loss: 0.0010, Accuracy : 97.21923076923076 %\n",
      "Epoch [2/4], Step [14000/15000], Loss: 0.0044, Accuracy : 97.24285714285715 %\n",
      "Epoch [2/4], Step [15000/15000], Loss: 0.0067, Accuracy : 97.25333333333333 %\n",
      "Epoch [3/4], Step [1000/15000], Loss: 0.0139, Accuracy : 98.3 %\n",
      "Epoch [3/4], Step [2000/15000], Loss: 0.2145, Accuracy : 98.075 %\n",
      "Epoch [3/4], Step [3000/15000], Loss: 0.0008, Accuracy : 98.08333333333333 %\n",
      "Epoch [3/4], Step [4000/15000], Loss: 0.0001, Accuracy : 98.0 %\n",
      "Epoch [3/4], Step [5000/15000], Loss: 0.0245, Accuracy : 98.075 %\n",
      "Epoch [3/4], Step [6000/15000], Loss: 0.0396, Accuracy : 98.12083333333334 %\n",
      "Epoch [3/4], Step [7000/15000], Loss: 0.0106, Accuracy : 98.10357142857143 %\n",
      "Epoch [3/4], Step [8000/15000], Loss: 0.0561, Accuracy : 98.0625 %\n",
      "Epoch [3/4], Step [9000/15000], Loss: 0.0810, Accuracy : 98.03333333333333 %\n",
      "Epoch [3/4], Step [10000/15000], Loss: 0.0109, Accuracy : 98.075 %\n",
      "Epoch [3/4], Step [11000/15000], Loss: 0.0002, Accuracy : 98.08863636363637 %\n",
      "Epoch [3/4], Step [12000/15000], Loss: 0.3655, Accuracy : 98.09583333333333 %\n",
      "Epoch [3/4], Step [13000/15000], Loss: 0.0440, Accuracy : 98.12692307692308 %\n",
      "Epoch [3/4], Step [14000/15000], Loss: 0.0038, Accuracy : 98.09821428571429 %\n",
      "Epoch [3/4], Step [15000/15000], Loss: 0.1221, Accuracy : 98.10166666666667 %\n",
      "Epoch [4/4], Step [1000/15000], Loss: 0.0005, Accuracy : 98.45 %\n",
      "Epoch [4/4], Step [2000/15000], Loss: 0.0037, Accuracy : 98.4875 %\n",
      "Epoch [4/4], Step [3000/15000], Loss: 0.0017, Accuracy : 98.50833333333334 %\n",
      "Epoch [4/4], Step [4000/15000], Loss: 0.0390, Accuracy : 98.5 %\n",
      "Epoch [4/4], Step [5000/15000], Loss: 0.0040, Accuracy : 98.535 %\n",
      "Epoch [4/4], Step [6000/15000], Loss: 0.0040, Accuracy : 98.46666666666667 %\n",
      "Epoch [4/4], Step [7000/15000], Loss: 0.2827, Accuracy : 98.51071428571429 %\n",
      "Epoch [4/4], Step [8000/15000], Loss: 0.0026, Accuracy : 98.515625 %\n",
      "Epoch [4/4], Step [9000/15000], Loss: 0.1868, Accuracy : 98.4888888888889 %\n",
      "Epoch [4/4], Step [10000/15000], Loss: 0.0001, Accuracy : 98.4875 %\n",
      "Epoch [4/4], Step [11000/15000], Loss: 0.0037, Accuracy : 98.49545454545455 %\n",
      "Epoch [4/4], Step [12000/15000], Loss: 0.0154, Accuracy : 98.5 %\n",
      "Epoch [4/4], Step [13000/15000], Loss: 0.0003, Accuracy : 98.52692307692308 %\n",
      "Epoch [4/4], Step [14000/15000], Loss: 0.0079, Accuracy : 98.5125 %\n",
      "Epoch [4/4], Step [15000/15000], Loss: 0.0453, Accuracy : 98.51166666666667 %\n"
     ]
    }
   ],
   "source": [
    "epochs,loss_train,accuracy_train=trainModel(cnn_model_one,4)\n",
    "#trainModel(cnn_model_one,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "c125986f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot\n",
    "plt.plot(epochs,loss_train,color=\"blue\")\n",
    "plt.title('CNN Loss VS Epoch')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "124c638b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot\n",
    "plt.plot(epochs,accuracy_train,color=\"green\")\n",
    "plt.title('CNN Accuracy VS Epoch')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "5d2ca09b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of the network on the test images: 98.67 %\n"
     ]
    }
   ],
   "source": [
    "with torch.no_grad():\n",
    "    n_correct = 0\n",
    "    n_samples = 0\n",
    "    for images, labels in test_loader:\n",
    "        prediction = cnn_model_one(images)\n",
    "        # max returns (value ,index)\n",
    "        _, predicted = torch.max(prediction.data, 1)\n",
    "        n_samples += labels.size(0)\n",
    "        n_correct += (predicted == labels).sum().item()\n",
    "\n",
    "    netTest_acc1 = 100.0 * n_correct / n_samples\n",
    "    print(f'Accuracy of the network on the test images: {netTest_acc1} %')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a45cb966",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
